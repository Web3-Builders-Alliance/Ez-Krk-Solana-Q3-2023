use crate::{
    constants::*,
    errors::ErrorCode,
    state::{Protocol, Vulnerability},
};
use anchor_lang::prelude::*;
use std::collections::BTreeMap;

#[derive(Accounts)]
#[instruction(input: Vec<String>, seed: u64)]
pub struct NewVulnerability<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(
        mut,
        seeds = [b"protocol", protocol.owner.as_ref()],
        bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        init,
        payer = owner,
        seeds = [b"vulnerability", protocol.key().as_ref(), owner.key().as_ref(), seed.to_le_bytes().as_ref()],
        bump,
        space = Vulnerability::LEN
    )]
    pub vulnerability: Account<'info, Vulnerability>,
    pub system_program: Program<'info, System>,
}

impl<'info> NewVulnerability<'info> {
    pub fn new_vulnerability(
        &mut self,
        bumps: &BTreeMap<String, u8>,
        title: String,
        form: Vec<String>,
        seed: u64,
    ) -> Result<()> {
        if form.len() != 5 {
            return err!(ErrorCode::FormIncomplete);
        };

        let vulnerability = &mut self.vulnerability;

        for field in form.iter() {
            if field.len() > MAX_ANSWER_LENGTH {
                return err!(ErrorCode::AnswerTooLong);
            } else if field.len() == 0 {
                return err!(ErrorCode::AnswerEmpty);
            } else {
                vulnerability.form.push(field.clone());
            }
        }
        // pub owner: Pubkey,
        // pub protocol: Pubkey,
        // pub title: String,
        // pub form: Vec<String>,
        // pub created_at: i64,
        // pub bump: u8,
        // pub seed: u64,
        vulnerability.owner = self.owner.key();
        vulnerability.protocol = self.protocol.key();
        vulnerability.title = title;
        vulnerability.bump = *bumps.get("vulnerability").unwrap();
        vulnerability.created_at = Clock::get().unwrap().unix_timestamp;
        vulnerability.seed = seed;
        let protocol = &mut self.protocol;
        protocol.hackers += 1;
        protocol.vulnerabilities += 1;
        Ok(())
    }
}
