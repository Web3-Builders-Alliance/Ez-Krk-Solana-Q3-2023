use crate::{
    constants::*,
    errors::ErrorCode,
    state::{DoxxVulnerability, Hacker, Protocol},
};
use anchor_lang::prelude::*;
use std::collections::BTreeMap;

#[derive(Accounts)]
#[instruction(message: Vec<u8>, seed: u64)]
pub struct ReportDoxxVulnerability<'info> {
    #[account(mut)]
    pub signer: Signer<'info>,
    #[account()]
    pub payout: SystemAccount<'info>,
    #[account(
        mut,
        seeds = [b"protocol", protocol.owner.as_ref()],
        bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        mut,
        seeds = [b"hacker", hacker.name.as_bytes().as_ref()],
        bump,
    )]
    pub hacker: Account<'info, Hacker>,
    #[account(
        init,
        payer = signer,
        seeds = [b"doxx", protocol.key().as_ref(), protocol.vulnerabilities.to_le_bytes().as_ref()],
        bump,
        space = DoxxVulnerability::LEN + (VECTOR_LENGTH_PREFIX + message.len())
    )]
    pub vulnerability: Account<'info, DoxxVulnerability>,
    pub system_program: Program<'info, System>,
}

impl<'info> ReportDoxxVulnerability<'info> {
    pub fn report_doxx_vulnerability(
        &mut self,
        bumps: &BTreeMap<String, u8>,
        message: Vec<u8>,
        seed: u64,
    ) -> Result<()> {
        if message.len() == 0 {
            return err!(ErrorCode::MessageEmpty);
        };

        let vulnerability = &mut self.vulnerability;

        // pub payout: Pubkey,
        // pub protocol: Pubkey,
        // pub hacker: Pubkey,
        // pub message: String,
        // pub reviewed: bool,
        // pub created_at: i64,
        // pub bump: u8,
        // pub seed: u64,

        vulnerability.payout = self.payout.key();
        vulnerability.protocol = self.protocol.key();
        vulnerability.hacker = self.hacker.key();
        vulnerability.message = message;
        vulnerability.bump = *bumps.get("vulnerability").unwrap();
        vulnerability.created_at = Clock::get()?.unix_timestamp;
        vulnerability.seed = seed;

        let protocol = &mut self.protocol;

        protocol.vulnerabilities += 1;

        let hacker = &mut self.hacker;
        hacker.vulnerabilities += 1;

        Ok(())
    }
}
